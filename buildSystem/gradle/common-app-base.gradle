apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion AppConfig.COMPILE_SDK_VERSION
    buildToolsVersion AppConfig.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId AppConfig.APPLICATION_ID
        minSdkVersion AppConfig.MIN_SDK_VERSION
        targetSdkVersion AppConfig.TARGET_SDK_VERSION
        versionCode AppVersion.CODE
        versionName AppVersion.NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled false
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            testCoverageEnabled false
            minifyEnabled false
            ext.enableCrashlytics = false
        }
        release {
            debuggable false
            testCoverageEnabled false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion Version.ANDROIDX_COMPOSE
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "jetpack"
            def apkExtension = ".apk"
            def SEP = "_"
            def buildType = name
            def versionName = variant.versionName
            def versionCode = versionCode
            def date = new Date()
            def formattedDate = date.format('ddMMyy_HHmm')
            def newApkName = project + SEP + buildType +
                    SEP + versionCode + SEP + versionName +
                    SEP + formattedDate + apkExtension
            outputFileName = new File(newApkName)
        }
        if (variant.buildType.name == "debug") {
            variant.mergedFlavor.resourceConfigurations.add("xxhdpi")
        }
    }

    compileOptions {
        sourceCompatibility AppConfig.sourceCompat
        targetCompatibility AppConfig.targetCompat
    }

    kotlinOptions {
        jvmTarget = AppConfig.kotlinOption
    }

    lint {
        abortOnError false
        checkDependencies true
        checkReleaseBuilds false
        ignoreTestSources true
        htmlOutput file("$buildDir/reports/lint/lint-results.html")
        xmlOutput file("$buildDir/reports/lint/lint-results.xml")
        disable += [
                'LogNotTimber',
                'StringFormatInTimber',
                'ThrowableNotAtBeginning',
                'BinaryOperationInTimber',
                'TimberArgCount',
                'TimberArgTypes',
                'TimberTagLength',
                'TimberExceptionLogging'
        ]
    }

    packagingOptions {
        resources {
            excludes += [
                    'META-INF/AL2.0',
                    'META-INF/LICENSE.md',
                    'META-INF/LICENSE-notice.md',
                    'META-INF/LGPL2.1',
                    'META-INF/storage_debug.kotlin_module'
            ]
        }
    }
}

dependencies {
    // Shared Modules
    implementation project(Modules.SHARED_CORE)
    implementation project(Modules.SHARED_KOTLIN)
    implementation project(Modules.SHARED_ROUTER)

    // Others
    implementation Dep.ANDROIDX_APPCOMPAT
    implementation Dep.ANDROIDX_COMPOSE_ACTIVITY
    implementation Dep.ANDROIDX_COMPOSE_RUNTIME
    implementation Dep.KOIN_ANDROID

    testImplementation Dep.JUNIT_JUPITER_API
    testImplementation Dep.JUNIT_JUPITER_PARAMS
    testImplementation Dep.KOIN_TEST

    testRuntimeOnly Dep.JUNIT_JUPITER_ENGINE

    androidTestImplementation Dep.ANDROIDX_TEST_JUNIT
    androidTestImplementation Dep.ANDROIDX_TEST_RUNNER
    androidTestImplementation Dep.ANDROIDX_TEST_RULES
    androidTestImplementation Dep.ANDROIDX_ARCH_CORE_TESTING
}
